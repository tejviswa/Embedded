/*
	Program      : 
	File Name    :
	Author       : D V SIVABABA
	Date         : 26-NOV-2024
	
 	Board        : RaayanMini
	Controller   : STM32F401RBT6
	Version      : 4.0
	
	Pins Used    : PORT C 2    convert as MISO
								 PORT C 3    convert as MOSI
								 PORT C 4    convert as SS
								 PORT B 10   convert as SCK
*/

#include "main.h"
//char ch='A';
//char temp;
int flag1,flag2;
char temp;
int main()
{
	//Phase 1:Device initialization
	PORT_Init_AHB1ENR(1);             //PORTB clock enable
	PORT_Init_AHB1ENR(2);             //PORTC clock enable
	KM_systick_IT();
	PORT_Init_APB2ENR(14);            //SYSCFG clock enable
	//Phase 2:Device Configuration
	PORT_Config_MODER(2,10,2);        //Alternate mode for MISO
	PORT_Config_MODER(2,10,3);        //Alternate mode for MOSI
	PORT_Config_MODER(2,01,4);        //Output mode for SS or CS
	PORT_Config_MODER(1,10,10);       //ALternate mode for SCK
	PORT_Config_PUPDR(2,01,8);				//Pullup for switch UP
	PORT_Config_PUPDR(2,01,9);				//Pullup for switch DN
	//GPIOC_OSPEEDR |= 0x01<<5;         //pin 2 set as high speed
	//GPIOC_OSPEEDR |= 0x01<<7;         //pin 3 set as high speed
	PORT_Config_MODER(1,01,13);       //RED LED
	PORT_Config_MODER(1,01,14);       //GREEN LED
	
	SYSCFG_EXTICR3 |= 0x01<<1;        //set PORT C as external interrupt
	SYSCFG_EXTICR3 |= 0x01<<5;        //set PORT C as external interrupt
	
	EXTI_FTSR_Config(8);              //Falling edge trigger for SW_UP
	EXTI_FTSR_Config(9);              //Falling edge trigger for SW_DN
	
	EXTI_IMR_Config(8);               //Masakable for SW_UP
	EXTI_IMR_Config(9);               //Masakable for SW_DN
	SPI2_Master_Bus_Init();
	NVIC_ISER0 |= 0x01<<23;           //NVIC interrupt for SW_UP & SW_DN 
	NVIC_ISER1 |= 0x01<<4;            //NVIC interrupt for SPI2
	
	GPIOB_ODR |= (0x01<<13);         //Turn OFF the RED LED
	GPIOB_ODR |= (0x01<<14);         //Turn OFF the GREEN LED
	
	while(1)
	{
		if(flag1 == 1)
		{
			GPIOC_ODR &= ~(0x01<<4);
			//SPI2_CR1 |=(0x01<<9);
			SPI2_Out_Char('R');
			//SPI2_CR1 &=~(0x01<<9);
//			KM_mdelay_IT(1000);
//			SPI2_DR = 0x00;
			GPIOC_ODR |= (0x01<<4);
			KM_Delay_ms(200);
			flag1=0;
		}
		else if(flag2 == 1)
		{
			GPIOC_ODR &= ~(0x01<<4);
			//SPI2_CR1 |=(0x01<<9);
			SPI2_Out_Char('G');
//			KM_mdelay_IT(1000);
//			SPI2_DR = 0x00;
			//SPI2_CR1 &=~(0x01<<9);
			GPIOC_ODR |= (0x01<<4);
			KM_Delay_ms(200);
			flag2=0;
		}
		//SPI2_CR1 |=(0x01<<8);
		SPI2_DR = 0x00;
		
	}
}

//Interrupt handler for SWITCH_UP & SWITCH_DOWN
void EXTI9_5_IRQHandler(void)
{
	if(EXTI_PR & 0x01<<8)                //checking the SWITCH_UP    
	{
		//SPI2_CR1 |= 0x01<<2;               //set as master
		//SPI2_DR = 'R';                     //send R character to the data register
		flag1=1;
		EXTI_PR |= 0x01<<8;
		//SPI2_CR1 |= ~(0x01<<2);            //set as slave
	}
	else if(EXTI_PR & 0x01<<9)           //checking the SWITCH_DOWN
	{
		//SPI2_CR1 |= 0x01<<2;             //set as master
		//SPI2_DR = 'G';                   //send G chracter to the data register
		flag2 = 1;
		EXTI_PR |= 0x01<<9;
		//SPI2_CR1 |= ~(0x01<<2);          //set as slave
	}
}

void SPI2_IRQHandler(void)
{
//	char temp;
	if(SPI2_SR & 0x01<<0)
		temp = SPI2_DR & 0xFF;
	if(temp =='R')
	{
		GPIOB_ODR |= 0x01<<13;
//		SPI2_CR1 &= ~(0x01<<8);
	}
	else if(temp == 'G')
	{
		GPIOB_ODR &= ~(0x01<<13);
//		SPI2_CR1 &= ~(0x01<<8);
	}
}
